{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["App","useState","name","email","number","user","setuser","person","setperson","changeHandle","e","target","value","Date","getTime","toString","removeItem","id","newItem","filter","console","log","className","onSubmit","preventDefault","htmlFor","type","required","onChange","map","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOA2GeA,MAzGf,WAEE,MAAsBC,mBAAS,CAC7BC,KAAM,GACNC,MAAO,GACPC,OAAQ,KAHV,mBAAKC,EAAL,KAAWC,EAAX,KAMA,EAA0BL,mBAAS,IAAnC,mBAAKM,EAAL,KAAaC,EAAb,KAGKN,EAAuBG,EAAvBH,KAAMC,EAAiBE,EAAjBF,MAAOC,EAAUC,EAAVD,OAIZK,EAAe,SAACC,GAEpB,MAAsBA,EAAEC,OAAnBT,EAAL,EAAKA,KAAOU,EAAZ,EAAYA,MAUZN,GAAQ,SAAAD,GAAS,IAAD,EACd,OAAO,2BAAIA,GAAX,uBAAkBH,EAAQU,GAA1B,oBAAqC,IAAIC,MAAOC,UAAUC,YAA1D,QAmBFC,EAAa,SAACC,GAChB,IAAIC,EAAUX,EAAOY,QAAO,SAAAZ,GAAM,OAAIA,EAAOU,KAAOA,KACpD,OAAOT,EAAUU,IAOjB,OAHFE,QAAQC,IAAId,GAIR,sBAAKe,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,iCADF,IAGQ,uBAEN,uBAAMC,SA7BU,SAACb,GACnBA,EAAEc,iBACFhB,GAAU,SAAAD,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAmBF,OAErBC,EAAQ,CACRJ,KAAM,GACNC,MAAO,GACPC,OAAQ,MAqBN,UAEI,sBAAKkB,UAAU,aAAf,UACE,uBAAOG,QAAQ,OAAf,qBADF,IACwC,uBACtC,uBAAOC,KAAK,OAAOxB,KAAK,OAAOe,GAAG,OAAOU,UAAQ,EAACf,MAAOV,EAAM0B,SAAUnB,OAG3E,sBAAKa,UAAU,aAAf,UACE,uBAAOG,QAAQ,QAAf,sBADF,IAC0C,uBACxC,uBAAOC,KAAK,QAAQd,MAAOT,EAAOD,KAAK,QAAQe,GAAG,QAAQU,UAAQ,EAACC,SAAUnB,OAI/E,sBAAKa,UAAU,aAAf,UACE,uBAAOG,QAAQ,SAAf,uBADF,IAC4C,uBAC1C,uBAAOC,KAAK,SAASxB,KAAK,SAASe,GAAG,SAASL,MAAOR,EACtDwB,SAAUnB,EAAckB,UAAQ,OAKlC,iDAKFpB,EAAOsB,KAAI,SAAAtB,GACT,IAAKL,EAA2BK,EAA3BL,KAAMC,EAAqBI,EAArBJ,MAAOC,EAAcG,EAAdH,OAAQa,EAAMV,EAANU,GAC1B,OACE,sBAAcK,UAAU,SAAxB,UACI,mCAAMpB,EAAN,OACA,kCAAKC,KACL,kCAAKC,EAAL,OACA,mBAAGkB,UAAU,SAASQ,QAAS,kBAAMd,EAAWC,IAAhD,wBAJMA,UCjFPc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fb74e7d5.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nfunction App() {\n\n  let [user, setuser] = useState({\n    name: \"\",\n    email: \"\",\n    number: \"\"\n  })\n\n  let [person, setperson] = useState([])\n\n\n  let {name, email, number} = user;\n\n\n\n  const changeHandle = (e) =>{\n\n    let {name , value } = e.target;\n\n    /*\n    \n    setuser e amar purber user o lagbe. nahole notun add korlei ager gula chole jabe. tai {...user} user korechi\n    \n\n    abar name ke dynamic way te babhor korechi [name] use kore. ar na hole type kore use korte hoto onekta emon = if(name === \"name\")\n    \n    */\n    setuser(user => {\n      return {...user, [name] : value, id: new Date().getTime().toString()}\n    })\n  }\n\n\n  const submitHandle =(e) => {\n    e.preventDefault()\n    setperson(person => {\n      return [...person, user]\n    })\n    setuser({\n    name: \"\",\n    email: \"\",\n    number: \"\"\n    })\n  }\n\n\n  // Remove item\nlet removeItem = (id) => {\n  let newItem = person.filter(person => person.id !== id)\n  return setperson(newItem)\n\n}\n\nconsole.log(person)\n\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">\n        Mulitple Input Form\n      </h1> <br /> \n      \n      <form onSubmit={submitHandle}>\n        {/* Name */}\n          <div className=\"form-field\">\n            <label htmlFor=\"name\">Name : </label> <br />\n            <input type=\"text\" name=\"name\" id=\"name\" required value={name} onChange={changeHandle}/>\n          </div>\n          {/* Email */}\n          <div className=\"form-field\">\n            <label htmlFor=\"email\">Email : </label> <br />\n            <input type=\"email\" value={email} name=\"email\" id=\"email\" required onChange={changeHandle}/>\n          </div>\n\n          {/* Age */}\n          <div className=\"form-field\">\n            <label htmlFor=\"number\">Number : </label> <br />\n            <input type=\"number\" name=\"number\" id=\"number\" value={number}\n            onChange={changeHandle} required/>\n          </div>\n\n\n          {/* Button */}\n          <button> Submit </button>\n      </form>\n\n\n      {\n        person.map(person => {\n          let {name, email, number, id} = person;\n          return (\n            <div key={id} className=\"person\">\n                <h2> {name} </h2>\n                <p> {email}</p>\n                <p> {number} </p>\n                <p className=\"remove\" onClick={() => removeItem(id)}> Remove </p>\n            </div>\n          )\n        })\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}